'''
Combs through elemental data generated by http://www.bmrb.wisc.edu/metabolomics/mass_query.php
to pull out the numbers of Hydrogens, Carbons, and Oxygens. 
'''

import csv

def extractNeededElementalData(csv_output_file_name):
    ELEMENTS_TO_FIND = ['C','H','O', 'N']

    # File set up
    f = open(csv_output_file_name)

    # Initializes the reader
    reader = csv.reader(f)

    # Gets list of all compounds in csv
    compounds = []
    for row in reader:
        if row[3] != '':
            compounds.append(row[3])
         
    elementalList = findElementsAndValues(ELEMENTS_TO_FIND, compounds)

    # close up file being used
    f.close()
    print elementalList
    return elementalList

# Note, this current format only works for 1 letter elements which works fine for H,C, and O
# which is what is needed for VanKrevelen Analysis
def findElementsAndValues(elements_to_find, compounds):
    complete_elementCounts = []
    for compound in compounds:
        line_elementCounts = []
        for e in elements_to_find:
            j = 0
            for c in compound:
                if c == e:
                    location = j
                    # sets element value equal to 1 because next char in compound is another element
                    if compound[location + 1].isupper():
                        line_elementCounts.append(1.0)
                        break
                    # breaks from looping through that string because it has hit a the end of the compound
                    elif compound[location + 1].isspace():
                        break
                    # has found a number value after the element
                    elif compound[location + 1].isdigit():
                        if compound[location + 2].isdigit():
                            #set value to the two digit number
                            line_elementCounts.append(float(compound[location + 1: location + 3]))
                            break
                        else:
                            #set value equal to the first digit
                            line_elementCounts.append(float(compound[location + 1]))
                            break
                j += 1
        complete_elementCounts.append(line_elementCounts)

    return complete_elementCounts























        
